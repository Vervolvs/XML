JSON

1) Создать внешний репозиторий с названием JSON == переходим на сайт https://github.com/ нажимаем на вкладку Repositories, нажимаем New, вводим имя репозитория и выбираем функцию Add a READMY file, далее Create repository.

2) Клонировать репозиторий JSON на локальный компьютер == в созданном репозитории нажимаем на Code, выбираем HTTPS, копируем ссылку. Переходим в Git Bash, создаем папку и заходим в неё, вводим команду git clone + ссылка, которую скопировали.

3) Внутри локального JSON создать файл "new.json" == touch new.json

4) Добавить файл под гит == git add new.json

5) Закоммитить файл == git commit -m "HW2"

6) Отправить файл на внешний GitHub репозиторий == git push

7) Отредактировать содержание файла "new.json" - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). == 

																				{
																					"surname": "Butranov",
																					"name": "Dmitry",
																					"patronymic": "Vyacheslavovich",
																					"age": 26,
																					"Number of pets": 3,
																					"Desired salary": "100K"



																				}

8) Отправить изменения на внешний репозиторий == git add new.json
						 git commit -m "HW2_MODIFIED"
                                                 git push

9) Создать файл preferences.json == touch preferences.json

10) В файл preferences.json добавить информацию о своих предпочтениях (Любимый фильм, сериал, еда, любимое время года, страна, которую хотели бы посетить) == 
																				{
        																				"favorite movie": "The thing",
        																				"favorite TV series": "Strange things",
    																				        "favorite food": "pizza",
        																				"favorite time of the year": "summer",
      																					"The country you would like to visit": "Japan"

																				}

11) Создать файл skills.json добавить информацию о скиллах, которые будут изучены на курсе == touch skills.json

                                                                                              {
													"skills": [
													"1. Базовая теория (Что такое тестирование, багрепорты, документация, виды, методы, направления тестирования и т.п.) SDLC, STLC.",
													"2. Что такое клиент-серверная архитектура.",
													"3. HTTP Методы запросов на сервер.",
													"4. Коды ответов HTTP сервера.",
													"5. Структуры HTTP запросов и ответов.",
													"6. Что такое JSON, XML. Их структура.",
													"7. Тестирование API через Postman (JS, автотесты API).",
													"8. Снятие и чтение логов c внешнего сервера.",
													"9. Снифинг http web трафика через Charles и Fiddler.",
													"10. Dev Tools веб браузеров (Google Chrome, FireFox).",
													"11. VPN. (Как работает, зачем нужен, как использовать, варианты инструментов)",
													"12. Мобильное тестирование.",
													"13. Особенность iOS, Android, гайдлайны.",
													"14. Сборка iOS приложений на XCode. (У кого нет Mac компьютера, просто посмотрят)",
													"15. Сборка Android приложений на Android Studio.",
													"16. ADB (управление андройд девайсами).",
													"17. Настройка прокси и vpn на iOS и Android.",
													"18. Перехват (сниффинг) мобильного трафика через Charles и Fiddler на iOS и Android.",
													"19. Командная строка (terminal) Linux (копирование, создание, просмотр, перемещение файлов на серверах без графического интерфейса)",
													"20. Основы bash скриптинг, автоматизация рутинных задач на сервере.",
													"21. Доступ к удалённым серверам.",
													"22. Основы SQL (Create, Delete, Drop, Insert Into, Select, From, Where, Join).",
													"23. База данных Postgres (установка, настройка и использование).",
													"24. Нереляционная база данных Redis (установка, настройка и использование).",
													"25. Нагрузочное тестирование в Jmeter.",
													"26. Методология разработки Scrum.",
													"27. Python. (Изучение основ. Создание клиент серверного приложения)"
														  ]
												}

12) Отправить сразу 2 файла на внешний репозиторий == git add .
						      git commit -m "Add 2 files"
						      Git push

13) На веб интерфейсе создать файл bug_report.json == переходим на https://github.com/, в своём профиле выбираем внешний репозиторий, далее нажимаем Add file и выбираем Create new file, прописываем название файла и содержимое, нажимаем на commit new file.

14) Сделать Commit changes (сохранить) изменения на веб интерфейсе == Зайти в созданный файл, нажать Edit this file, после внесения изменений нажать commit changes

15) На веб интерфейсе модифицировать файл bug_report.json, добавить баг репорт в формате JSON == 
													[{
														"Описание": "На сайте, в разделе Тип оплаты, не виден тип оплаты онлайн при офрмлении заказа.",
														"Проект": "Проект1",
														"Компонент приложения": "Раздел с типом оплаты",
														"Версия": "1.1",
														"Серьезность": 5,
														"Приоритет": 5,
														"Статус": "Назначен",
														"Автор": "Бутранов Д.В",
														"Назначение": "Сергеев В.В",
														"Окружение": "ОС Windows 10 Pro, 64-разрядная система, сервис пак 111.2223.445, браузер FireFox 97.0.1 (64 бита)",
														"Шаги воспроизведения": "Добавляем любой товар в Корзину, нажимаем Перейти к оформлению, заполняем данные о клиенте и адрес доставки, нажимаем Способ оплаты, в разделе Тип оплаты есть только оплата наличными, оплата онлайн отсутствует",
														"Фактический результат": "Оплата онлайн отсутствует",
														"Ожидаемый результат": "Можем оплатить заказ онлайн"

													}]

16) Сделать Commit changes (сохранить) изменения на веб интерфейсе ==  После внесения изменений нажать commit changes

17) Синхронизировать внешний и локальный репозиторий == git pull 


XML

1) Создать внешний репозиторий  с названием XML == переходим на сайт https://github.com/ нажимаем на вкладку Repositories, нажимаем New, вводим имя репозитория и выбираем функцию Add a READMY file, далее Create repository.

2) Клонировать репозиторий XML на локальный компьютер == в созданном репозитории нажимаем на Code, выбираем HTTPS, копируем ссылку. Переходим в Git Bash, создаем папку и заходим в неё, вводим команду git clone + ссылка, которую скопировали.

3) Внутри локального XML создать файл "new.xml" == touch new.xml 

4) Добавить файл под гит == git add new.xml

5) Закоммитить файл == git commit -m "HW2"

6) Отправить файл на внешний GitHub репозиторий == git push

7) Отредактировать содержание файла "new.xml" - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата) == nano new.xml
																			<info>

																				<FIO>

																					<surname>Butranov</surname>

																					<name>Dmitry</name>

																					<patronymic>Vyacheslavovich</patronymic>

																				</FIO>

																				<age>26</age>

																				<number_of_pets>3</number_of_pets>

																				<desired_salary>100K</desired_salary>

																			</info>

8) Отправить изменения на внешний репозиторий == git add new.xml
						 git commit -m "HW2_MODIFIED"
                                                 git push

9) Создать файл preferences.xml == touch preferences.xml

10) В файл preferences.xml добавить информацию о своих предпочтениях (любимый фильм, сериал, еда, любимое время года, страна, которую хотели бы посетить) == 

																			<preferences>
      
																				<favorite_movie> The thing </favorite_movie>     

																				<favorite_TV_series> Strange things </favorite_TV_series>

																				<favorite_food> Pizza </favorite_food>
    
																				<favorite_time_of_the_year> Summer </favorite_time_of_the_year>

																				<The_country_you_would_like_to_visit> Japan </The_country_you_would_like_to_visit>

																			</preferences>


11) Создать файл skills.xml, добавить информацию о скиллах, которые будут изучены на курсе == touch skills.xml
												<info_skills>

														<Skills_being_studied>

															1. Базовая теория (Что такое тестирование, багрепорты, документация, виды, методы, направления тестирования и т.п.) SDLC, STLC.
															2. Что такое клиент-серверная архитектура.
															3. HTTP Методы запросов на сервер.
															4. Коды ответов HTTP сервера.
															5. Структуры HTTP запросов и ответов.
															6. Что такое JSON, XML. Их структура.
															7. Тестирование API через Postman (JS, автотесты API).
															8. Снятие и чтение логов c внешнего сервера.
															9. Снифинг http web трафика через Charles и Fiddler.
															10. Dev Tools веб браузеров (Google Chrome, FireFox).
															11. VPN. (Как работает, зачем нужен, как использовать, варианты инструментов)
															12. Мобильное тестирование.
															13. Особенность iOS, Android, гайдлайны.
															14. Сборка iOS приложений на XCode. (У кого нет Mac компьютера, просто посмотрят)
															15. Сборка Android приложений на Android Studio.
															16. ADB (управление андройд девайсами).
															17. Настройка прокси и vpn на iOS и Android.
															18. Перехват (сниффинг) мобильного трафика через Charles и Fiddler на iOS и Android.
															19. Командная строка (terminal) Linux (копирование, создание, просмотр, перемещение файлов на серверах без графического интерфейса)
															20. Основы bash скриптинг, автоматизация рутинных задач на сервере.
															21. Доступ к удалённым серверам.
															22. Основы SQL (Create, Delete, Drop, Insert Into, Select, From, Where, Join).
															23. База данных Postgres (установка, настройка и использование).
															24. Нереляционная база данных Redis (установка, настройка и использование).
															25. Нагрузочное тестирование в Jmeter.
															26. Методология разработки Scrum.
															27. Python. (Изучение основ. Создание клиент серверного приложения)
														</Skills_being_studied>


												</info_skills>

12) Сделать коммит в одну строку == git commit -am "Add 2 files"

13) Отправить сразу 2 файла на внешний репозиторий == git push	

14) На веб интерфейсе создать файл bug_report.xml ==   переходим на https://github.com/, в своём профиле выбираем внешний репозиторий, далее нажимаем Add file и выбираем Create new file, прописываем название файла и содержимое, нажимаем на commit new file. 

15) Сделать Commit changes (сохранить) изменения на веб интерфейсе == Зайти в созданный файл, нажать Edit this file, после внесения изменений нажать commit changes

16) На веб интерфейсе модифицировать файл bug_report.xml, добавить баг репорт в формате XML ==	
												<bug_report>

													<Description> На сайте, в разделе Тип оплаты, не виден тип оплаты онлайн при офрмлении заказа. </Description>

													<Project> Проект1 </Project>

													<Application_Component> Раздел с типом оплаты </Application_Component>

													<Version> 1.1 </Version>

													<Seriousness> 5 </Seriousness>

													<Priority> 5 </Priority>

													<Status> Назначен </Status>

													<Author> Бутранов Д.В </Author>

													<Appointment> Сергеев В.В </Appointment>

													<Environment> ОС Windows 10 Pro, 64-разрядная система, сервис пак 111.2223.445, браузер FireFox 97.0.1 (64 бита) </Environment>

													<Playback_Steps> Добавляем любой товар в Корзину, нажимаем Перейти к оформлению, заполняем данные о клиенте и адрес доставки, нажимаем Способ оплаты, в разделе Тип оплаты есть только оплата наличными, оплата онлайн отсутствует </Playback_Steps>

													<Actual_result> Оплата онлайн отсутствует </Actual_result>

													<Expected_result> Можем оплатить заказ онлайн </Expected_result>

												</bug_report>	


17) Сделать Commit changes (сохранить) изменения на веб интерфейсе == После внесения изменений нажать commit changes	

18) Синхронизировать внешний и локальный репозиторий == git pull   



TXT


1) Создать внешний репозиторий  с названием TXT == переходим на сайт https://github.com/ нажимаем на вкладку Repositories, нажимаем New, вводим имя репозитория и выбираем функцию Add a READMY file, далее Create repository.

2) Клонировать репозиторий TXT на локальный компьютер == в созданном репозитории нажимаем на Code, выбираем HTTPS, копируем ссылку. Переходим в Git Bash, создаем папку и заходим в неё, вводим команду git clone + ссылка, которую скопировали.

3) Внутри локального TXT создать файл "new.txt" == touch new.txt 

4) Добавить файл под гит == git add new.txt

5) Закоммитить файл == git commit -m "HW2"

6) Отправить файл на внешний GitHub репозиторий == git push

7) Отредактировать содержание файла "new.txt" - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата) == nano new.txt

																		      ФИО: Бутранов Дмитрий Вячеславович
																		      Возраст: 26 лет
                                      														      Количество домашних животных: 3
                																      Будущая желаемая зарплата: 100 тысяч

8) Отправить изменения на внешний репозиторий == git add new.txt
						 git commit -m "HW2_MODIFIED"
                                                 git push	

9) Создать файл preferences.txt == touch preferences.txt

10) В файл preferences.txt добавить информацию о своих предпочтениях (любимый фильм, сериал, еда, любимое время года, страна, которую хотели бы посетить) == nano preferences.txt

																			     Любимый фильм: Нечто
																			     Любимый сериал: Очень странные дела
																			     Любимая еда: пицца
																			     Любимое время года: лето

11) Создать файл skills.txt, добавить информацию о скиллах, которые будут изучены на курсе == nano skills.txt 
                              								      Навыки, которые будут изучены на курсе:
											      1. Базовая теория (Что такое тестирование, багрепорты, документация, виды, методы, направления тестирования и т.п.) SDLC, STLC.
											      2. Что такое клиент-серверная архитектура.
										              3. HTTP Методы запросов на сервер.
											      4. Коды ответов HTTP сервера.
											      5. Структуры HTTP запросов и ответов.
											      6. Что такое JSON, XML. Их структура.
											      7. Тестирование API через Postman (JS, автотесты API).
											      8. Снятие и чтение логов c внешнего сервера.
											      9. Снифинг http web трафика через Charles и Fiddler.
											      10. Dev Tools веб браузеров (Google Chrome, FireFox).
											      11. VPN. (Как работает, зачем нужен, как использовать, варианты инструментов)
											      12. Мобильное тестирование.
											      13. Особенность iOS, Android, гайдлайны.
									              	      14. Сборка iOS приложений на XCode. (У кого нет Mac компьютера, просто посмотрят)
											      15. Сборка Android приложений на Android Studio.
											      16. ADB (управление андройд девайсами).
											      17. Настройка прокси и vpn на iOS и Android.
										              18. Перехват (сниффинг) мобильного трафика через Charles и Fiddler на iOS и Android.
											      19. Командная строка (terminal) Linux (копирование, создание, просмотр, перемещение файлов на серверах без графического интерфейса)
										              20. Основы bash скриптинг, автоматизация рутинных задач на сервере.
											      21. Доступ к удалённым серверам.
                         								      22. Основы SQL (Create, Delete, Drop, Insert Into, Select, From, Where, Join).
     											      23. База данных Postgres (установка, настройка и использование).
											      24. Нереляционная база данных Redis (установка, настройка и использование).
											      25. Нагрузочное тестирование в Jmeter.
              										      26. Методология разработки Scrum.
               										      27. Python. (Изучение основ. Создание клиент серверного приложения)		


12) Сделать коммит в одну строку == git commit -am "Add 2 files"

13) Отправить сразу 2 файла на внешний репозиторий == git push	

14) На веб интерфейсе создать файл bug_report.txt ==   переходим на https://github.com/, в своём профиле выбираем внешний репозиторий, далее нажимаем Add file и выбираем Create new file, прописываем название файла и содержимое, нажимаем на commit new file. 

15) Сделать Commit changes (сохранить) изменения на веб интерфейсе == Зайти в созданный файл, нажать Edit this file, после внесения изменений нажать commit changes

16) На веб интерфейсе модифицировать файл bug_report.txt, добавить баг репорт в формате TXT ==                 
														Описание: На сайте, в разделе Тип оплаты, не виден тип оплаты онлайн при офрмлении заказа.
														Проект: Проект1.
														Компонент приложения: Раздел с типом оплаты.
														Версия: 1.1
														Серьезность: 5
														Приоритет": 5
														Статус: Назначен.
														Автор: Бутранов Д.В
														Назначение: "Сергеев В.В
														Окружение: ОС Windows 10 Pro, 64-разрядная система, сервис пак 111.2223.445, браузер FireFox 97.0.1 (64 бита)
														Шаги воспроизведения: Добавляем любой товар в Корзину, нажимаем Перейти к оформлению, заполняем данные о клиенте и адрес доставки, нажимаем Способ оплаты, в разделе Тип оплаты есть только оплата наличными, оплата онлайн отсутствует.
														Фактический результат: Оплата онлайн отсутствует.
														Ожидаемый результат: Можем оплатить заказ онлайн.


17) Сделать Commit changes (сохранить) изменения на веб интерфейсе == После внесения изменений нажать commit changes	

18) Синхронизировать внешний и локальный репозиторий == git pull 
												